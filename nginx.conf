events { }

http {

  # this is essential for chunked responses to work
  proxy_http_version 1.1;
  
  server {
    listen *:80;

    # Internal Docker DNS
    # https://docs.docker.com/engine/userguide/networking/configure-dns/    
    
    resolver 127.0.0.11 ipv6=off valid=10s;

    proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header  X-Forwarded-Proto $scheme;
    proxy_set_header  X-Forwarded-Host $host;


    location = /favicon.ico {
      return 204;
      log_not_found off;
      access_log off;
    }

    location / {
       return 301 $scheme://$host/web-app;
    }

    location /web-app/ {
      set $web_endpoint       http://web:8080;
      proxy_pass              $web_endpoint;
      proxy_redirect          http://keycloak:8080/ $scheme://$host/;
    }

    location /web-app/PUSH {
      set $web_endpoint       http://web:8080;
      proxy_pass              $web_endpoint;
      proxy_set_header        Upgrade $http_upgrade;
      proxy_set_header        Connection "upgrade";
    }

    # Keycloak
    location /auth/ {
      set $keycloak_endpoint  http://keycloak:8080;
      proxy_pass              $keycloak_endpoint;
    }

    # Hack until https://issues.jboss.org/browse/KEYCLOAK-6073 is done
    #
    # Make keycloak believe that it is accessed through it's internal URL by 
    # rewriting Host header with the reverse proxy, disregarding the external 
    # url used. Rewrite of some HTTP BODY data is also needed (form submit address)
    #
    location /auth/realms/WebRealm {
      set $keycloak_endpoint  http://keycloak:8080;
      proxy_pass              $keycloak_endpoint;
      proxy_set_header        Host "keycloak:8080";
      sub_filter              http://keycloak:8080 $scheme://$host;
      sub_filter_once         off;
      proxy_redirect          http://keycloak:8080/ $scheme://$host/;
   }
  }
}